getwd()
?sink
source("U:/Documents/workshops summer 2023/summer repro package/Code/R/cars.R", echo=TRUE)
getwd()
source("U:/Documents/workshops summer 2023/summer repro package/Code/R/csat.R", echo=TRUE)
?cbind
getwd()
setwd("../../Data/presidents")
#Recognize all files in a specific directory.
#Load required packages
library(data.table)
library(tidyverse)
library(readr)
pres2008 <- read.csv("president2008.csv", header = TRUE)
library(dplyr)
pres2008 <- read.csv("president2008.csv", header = TRUE)
pres2012 <- read.csv("president2012.csv", header = TRUE)
pres2016 <- read.csv("president2016.csv", header = TRUE)
pres2020 <- read.csv("president2020.csv", header = TRUE)
View(pres2008)
?merge
master <- merge(pres2008, pres2012, by=fips)
master <- merge(pres2008, pres2012, by="fips")
View(master)
master <- merge(master, pres2016, by="fips")
master <- merge(master, pres2020, by="fips")
View(master)
getwd()
datasets = list.files(path = ".", patter = "*.csv") %>%
map_df(~fread(.))
View(datasets)
#Try again. Different method merge. This is what we want. Combine by fips.
#https://statisticsglobe.com/merge-csv-files-in-r
library(purrr)
datasets = list.files(path = ".", patter = "*.csv") %>%
lapply(read_csv) %>%
reduce(full_join, by="fips")
View(datasets)
?ttest
?t.test
master$demprop8 <- master$democrat2008 / master$totalvote2008
master$repprop8 <- master$republican2008 / master$totalvote2008
master$repprop20 <- master$republican2020 / master$totalvote2020
t.test(master$demprop8, master$repprop8)
t.test(master$repprop20, master$repprop8)
var.test(data2008$republican, data2008$democrat)
var.test(master$democrat2008, master$republican2008)
data_w <- datasets %>%
filter(type.x == "County") %>%
select(fips, name.x, type.x, totalvote2008, democrat2008, republican2008, others2008,
totalvote2012, democrat2012, republican2012, others2012,
totalvote2016, democrat2016, republican2016, others2016,
totalvote2020, democrat2020, republican2020, others2020)
data_w <- master %>%
filter(type.x == "County") %>%
select(fips, name.x, type.x, totalvote2008, democrat2008, republican2008, others2008,
totalvote2012, democrat2012, republican2012, others2012,
totalvote2016, democrat2016, republican2016, others2016,
totalvote2020, democrat2020, republican2020, others2020)
test <- master %>%
select(fips, name.x, type.x, totalvote2008, democrat2008, republican2008, others2008,
totalvote2012, democrat2012, republican2012, others2012,
totalvote2016, democrat2016, republican2016, others2016,
totalvote2020, democrat2020, republican2020, others2020)
?merge
temp <- master[, !duplicated(colnames(master))]
master <- master[, !duplicated(colnames(master))]
data_w <- master %>%
filter(type.x == "County") %>%
select(fips, name.x, type.x, totalvote2008, democrat2008, republican2008, others2008,
totalvote2012, democrat2012, republican2012, others2012,
totalvote2016, democrat2016, republican2016, others2016,
totalvote2020, democrat2020, republican2020, others2020)
#Create better names for columns. Change names of columns 2 and 3
#https://sparkbyexamples.com/r-programming/rename-column-in-r/
colnames(data_w)[2] = "name"
colnames(data_w)[3] = "type"
#Describe data
str(data_w)
#Reshape dataset to be long format.
library(tidyr)
#https://weiyangtham.github.io/stata_reshape/
data_L = data_w %>% tidyr::gather("var", "value", c(totalvote2008:others2020))
data_L = data_L %>%
tidyr::extract("var", c("colname", "year"), regex = "([a-z]+)(\\d+)") %>%
tidyr::spread("colname", "value")
#Now perform analysis section.
#Create new columns for percentage of total votes to dems and reps.
data_L$demp = data_L$democrat/data_L$totalvote
data_L$repp = data_L$republican/data_L$totalvote
#sink()
#Create log file to keep track of code and results.
#sink("../../Output/presidents_analysis.txt")
#Ttest comparing democratic proportion to republican all time
t.test(data_L$demp, data_L$repp)
#Same thing but for a specific year
#Select year = 2008
data2008 <- data_L %>%
filter(year == "2008")
#Perform ttest.
t.test(data2008$demp, data2008$repp)
#Create summary dataset. Average proportion of republican and democratic votes for all fips split by years
#https://dplyr.tidyverse.org/reference/summarise.html
data_sum <- data_L %>%
group_by(year) %>%
summarise(meanrep = mean(repp, na.rm = TRUE), meandem = mean(demp, na.rm = TRUE),
sumrep = sum(totalvote, na.rm = TRUE), sumdem = sum(totalvote, na.rm = TRUE))
View(data_sum)
#Next compare 2008 to 2012 within political party
data2008_12 <- data_L %>%
filter(year == "2008" | year == "2012")
#Now perform ttest
t.test(demp ~ year, data = data2008_12)
t.test(repp ~ year, data = data2008_12)
#Perform FTest to compare standard deviation of dem and rep for 2008.
#http://www.sthda.com/english/wiki/f-test-compare-two-variances-in-r
var.test(data2008$republican, data2008$democrat)
#Now create overlapping line graph change of percentage rep and dem votes by year.
#Setup dataset again.
data_sum <- data_L %>%
group_by(year) %>%
summarise(meanrep = mean(repp, na.rm = TRUE), meandem = mean(demp, na.rm = TRUE),
sumrep = sum(totalvote, na.rm = TRUE), sumdem = sum(totalvote, na.rm = TRUE))
library(ggplot2)
#https://www.r-bloggers.com/2021/10/line-plots-in-r-time-series-data-visualization/
#Create overlapping line graph.
ggplot(data_sum, aes(x=as.numeric(year))) +
geom_line(aes(y=meanrep), color = "blue") +
geom_line(aes(y=meandem), color = "red")
#Save image.
save.image("../../Output/presidents_Rimage.RData")
getwd()
setwd("../../Code/R")
getwd()
setwd("../../Data/presidents")
#Recognize all files in a specific directory.
#Load required packages
library(data.table)
install.packages("data.table")
setwd("../../Data/presidents")
#Recognize all files in a specific directory.
#Load required packages
library(data.table)
library(tidyverse)
install.packages("tidyverse")
setwd("../../Data/presidents")
#Recognize all files in a specific directory.
#Load required packages
library(data.table)
library(tidyverse)
library(readr)
pres2008 <- read.csv("president2008.csv", header = TRUE)
pres2012 <- read.csv("president2012.csv", header = TRUE)
pres2016 <- read.csv("president2016.csv", header = TRUE)
pres2020 <- read.csv("president2020.csv", header = TRUE)
master <- merge(pres2008, pres2012, by="fips")
master <- merge(master, pres2016, by="fips")
master <- merge(master, pres2020, by="fips")
master$demprop8 <- master$democrat2008 / master$totalvote2008
master$repprop8 <- master$republican2008 / master$totalvote2008
master$repprop20 <- master$republican2020 / master$totalvote2020
t.test(master$demprop8, master$repprop8)
t.test(master$repprop20, master$repprop8)
var.test(master$democrat2008, master$republican2008)
library(data.table)
library(tidyverse)
library(readr)
#Import datasets individually.
pres2008 <- read.csv("president2008.csv", header = TRUE)
pres2012 <- read.csv("president2012.csv", header = TRUE)
pres2016 <- read.csv("president2016.csv", header = TRUE)
pres2020 <- read.csv("president2020.csv", header = TRUE)
#Merge datasets.
master <- merge(pres2008, pres2012, by="fips")
master <- merge(master, pres2016, by="fips")
master <- merge(master, pres2020, by="fips")
#Remove duplicate columns. Important for following subset.
master <- master[, !duplicated(colnames(master))]
#Subset. Keep only county
master <- master %>%
filter(type.x == "County")
#Create new variables for proportion.
master$demprop8 <- master$democrat2008 / master$totalvote2008
master$repprop8 <- master$republican2008 / master$totalvote2008
master$repprop20 <- master$republican2020 / master$totalvote2020
#Ttest from above created variables.
t.test(master$demprop8, master$repprop8)
t.test(master$repprop20, master$repprop8)
#Variance test
var.test(master$democrat2008, master$republican2008)
#filter dataset only county.
data_w <- master %>%
filter(type.x == "County") %>%
select(fips, name.x, type.x, totalvote2008, democrat2008, republican2008, others2008,
totalvote2012, democrat2012, republican2012, others2012,
totalvote2016, democrat2016, republican2016, others2016,
totalvote2020, democrat2020, republican2020, others2020)
View(data_w)
colnames(data_w)[2] = "name"
colnames(data_w)[3] = "type"
#Describe data
str(data_w)
#Reshape dataset to be long format.
library(tidyr)
data_L = data_w %>% tidyr::gather("var", "value", c(totalvote2008:others2020))
data_L = data_L %>%
tidyr::extract("var", c("colname", "year"), regex = "([a-z]+)(\\d+)") %>%
tidyr::spread("colname", "value")
#Create new columns for percentage of total votes to dems and reps.
data_L$demp = data_L$democrat/data_L$totalvote
data_L$repp = data_L$republican/data_L$totalvote
#sink()
#Create log file to keep track of code and results.
#sink("../../Output/presidents_analysis.txt")
#Ttest comparing democratic proportion to republican all time
t.test(data_L$demp, data_L$repp)
#Same thing but for a specific year
#Select year = 2008
data2008 <- data_L %>%
filter(year == "2008")
#Perform ttest.
t.test(data2008$demp, data2008$repp)
#Create summary dataset. Average proportion of republican and democratic votes for all fips split by years
#https://dplyr.tidyverse.org/reference/summarise.html
data_sum <- data_L %>%
group_by(year) %>%
summarise(meanrep = mean(repp, na.rm = TRUE), meandem = mean(demp, na.rm = TRUE),
sumrep = sum(totalvote, na.rm = TRUE), sumdem = sum(totalvote, na.rm = TRUE))
View(data_sum)
#Next compare 2008 to 2012 within political party
data2008_12 <- data_L %>%
filter(year == "2008" | year == "2012")
#Now perform ttest
t.test(demp ~ year, data = data2008_12)
t.test(repp ~ year, data = data2008_12)
#Perform FTest to compare standard deviation of dem and rep for 2008.
#http://www.sthda.com/english/wiki/f-test-compare-two-variances-in-r
var.test(data2008$republican, data2008$democrat)
#Now create overlapping line graph change of percentage rep and dem votes by year.
#Setup dataset again.
data_sum <- data_L %>%
group_by(year) %>%
summarise(meanrep = mean(repp, na.rm = TRUE), meandem = mean(demp, na.rm = TRUE),
sumrep = sum(totalvote, na.rm = TRUE), sumdem = sum(totalvote, na.rm = TRUE))
library(ggplot2)
#Create overlapping line graph.
ggplot(data_sum, aes(x=as.numeric(year))) +
geom_line(aes(y=meanrep), color = "blue") +
geom_line(aes(y=meandem), color = "red")
setwd("../../Code/R")
#Create log file. Track of all output and commands.
#sink("../../Output/president_manipulation.txt")
#Download data files online. president2008.csv, president2012.csv, president2016.csv, president2020.csv
#Set directory to where data files are
setwd("../../Data/presidents")
#Recognize all files in a specific directory.
#Load required packages
library(data.table)
library(tidyverse)
library(readr)
#Locate all files in directory and import. This option does not work. Need to mergeby fips number not append.
#https://sparkbyexamples.com/r-programming/r-read-multiple-csv-files/
datasets = list.files(path = ".", patter = "*.csv") %>%
map_df(~fread(.))
View(datasets)
#Try again. Different method merge. This is what we want. Combine by fips.
#https://statisticsglobe.com/merge-csv-files-in-r
library(purrr)
datasets = list.files(path = ".", patter = "*.csv") %>%
lapply(read_csv) %>%
reduce(full_join, by="fips")
View(datasets)
#Apply subset. Only keep rows where type is county. Clean dataset to keep important columns.
#https://dplyr.tidyverse.org/reference/filter.html
data_w <- datasets %>%
filter(type.x == "County") %>%
select(fips, name.x, type.x, totalvote2008, democrat2008, republican2008, others2008,
totalvote2012, democrat2012, republican2012, others2012,
totalvote2016, democrat2016, republican2016, others2016,
totalvote2020, democrat2020, republican2020, others2020)
View(datasets)
datasets = datasets %>%
filter(type.x == "County")
datasets$demprop8 <- datasets$democrat2008 / datasets$totalvote2008
datasets$repprop8 <- datasets$republican2008 / datasets$totalvote2008
master$repprop20 <- datasets$republican2020 / datasets$totalvote2020
#Ttest from above created variables.
t.test(datasets$demprop8, datasets$repprop8)
t.test(datasets$repprop20, datasets$repprop8)
datasets$repprop20 <- datasets$republican2020 / datasets$totalvote2020
t.test(datasets$repprop20, datasets$repprop8)
#Variance test
var.test(master$democrat2008, master$republican2008)
#Variance test
var.test(datasets$democrat2008, datasets$republican2008)
#Apply subset. Only keep rows where type is county. Clean dataset to keep important columns.
#https://dplyr.tidyverse.org/reference/filter.html
data_w <- datasets %>%
filter(type.x == "County") %>%
select(fips, name.x, type.x, totalvote2008, democrat2008, republican2008, others2008,
totalvote2012, democrat2012, republican2012, others2012,
totalvote2016, democrat2016, republican2016, others2016,
totalvote2020, democrat2020, republican2020, others2020)
#Create better names for columns. Change names of columns 2 and 3
#https://sparkbyexamples.com/r-programming/rename-column-in-r/
colnames(data_w)[2] = "name"
colnames(data_w)[3] = "type"
#Describe data
str(data_w)
#Reshape dataset to be long format.
library(tidyr)
data_L = data_w %>% tidyr::gather("var", "value", c(totalvote2008:others2020))
data_L = data_L %>%
tidyr::extract("var", c("colname", "year"), regex = "([a-z]+)(\\d+)") %>%
tidyr::spread("colname", "value")
#Create new columns for percentage of total votes to dems and reps.
data_L$demp = data_L$democrat/data_L$totalvote
data_L$repp = data_L$republican/data_L$totalvote
#sink()
#Create log file to keep track of code and results.
#sink("../../Output/presidents_analysis.txt")
#Ttest comparing democratic proportion to republican all time
t.test(data_L$demp, data_L$repp)
#Same thing but for a specific year
#Select year = 2008
data2008 <- data_L %>%
filter(year == "2008")
#Perform ttest.
t.test(data2008$demp, data2008$repp)
#Create summary dataset. Average proportion of republican and democratic votes for all fips split by years
#https://dplyr.tidyverse.org/reference/summarise.html
data_sum <- data_L %>%
group_by(year) %>%
summarise(meanrep = mean(repp, na.rm = TRUE), meandem = mean(demp, na.rm = TRUE),
sumrep = sum(totalvote, na.rm = TRUE), sumdem = sum(totalvote, na.rm = TRUE))
View(data_sum)
#Next compare 2008 to 2012 within political party
data2008_12 <- data_L %>%
filter(year == "2008" | year == "2012")
#Now perform ttest
t.test(demp ~ year, data = data2008_12)
t.test(repp ~ year, data = data2008_12)
#Perform FTest to compare standard deviation of dem and rep for 2008.
#http://www.sthda.com/english/wiki/f-test-compare-two-variances-in-r
var.test(data2008$republican, data2008$democrat)
#Now create overlapping line graph change of percentage rep and dem votes by year.
#Setup dataset again.
data_sum <- data_L %>%
group_by(year) %>%
summarise(meanrep = mean(repp, na.rm = TRUE), meandem = mean(demp, na.rm = TRUE),
sumrep = sum(totalvote, na.rm = TRUE), sumdem = sum(totalvote, na.rm = TRUE))
library(ggplot2)
#Create overlapping line graph.
ggplot(data_sum, aes(x=as.numeric(year))) +
geom_line(aes(y=meanrep), color = "blue") +
geom_line(aes(y=meandem), color = "red")
#Save log file.
#sink()
setwd("../../Code/R")
#Create log file.
#sink("../../Output/regression_log.txt")
library(tidyverse)
#Import data
reg_data = read.csv("../../Data/csat/states_SAT2006.csv", header = TRUE)
#Get descriptive data of variables
str(reg_data)
summary(reg_data)
#Attempt linear regression. Predict csat from expense, percent, income, high, college
lm(csat ~ expense + percent + income + high + college, data = reg_data)
#Fix percent variable. Needs to be numeric. remove % and convert to numeric
class(reg_data$percent)
#Replace % with empty space. The % is forcing variable to be string. Needs to numeric.
reg_data$percent <- as.numeric(gsub("%", "", reg_data$percent))
#Check the type of variable.
class(reg_data$percent)
#Check regression results again. This looks better.
lm(csat ~ expense + percent + income + high + college, data = reg_data)
#Fix percent variable. Needs to be numeric. remove % and convert to numeric
class(reg_data$percent)
#Replace % with empty space. The % is forcing variable to be string. Needs to numeric.
reg_data$percent <- as.numeric(gsub("%", "", reg_data$percent))
#Check the type of variable.
class(reg_data$percent)
#Check regression results again. This looks better.
lm(csat ~ expense + percent + income + high + college, data = reg_data)
#Look at spread of independent and dependent variables.
hist(csat)
#Look at spread of independent and dependent variables.
hist(reg_data$csat)
hist(reg_data$expense)
hist(reg_data$percent)
#Remove outliers and missing data
#Missing data
#https://bookdown.org/rwnahhas/IntroToR/exclude-observations-with-missing-data.html#
reg_data <- na.omit(reg_data)
#Outliers. Q3 + 1.5*IQR, Q1 - 1.5*IQR test for outliers.
outliers = boxplot(reg_data$expense, plot=FALSE)$OUT
reg_data_o = reg_data[-which(reg_data$expense %in% outliers), ]
#Correlation of important variables
#http://www.sthda.com/english/wiki/correlation-matrix-a-quick-start-guide-to-analyze-format-and-visualize-a-correlation-matrix-using-r-software
#Create dataset of variables want to do correlation for.
cor_data <- reg_data %>%
select(csat, expense, percent, income, high, college)
#Create correlation matrix.
cor(cor_data)
#Perform some graphs to look at relationship and distribution. Basic scatterplots.
plot(reg_data$csat, reg_data$high)
plot(reg_data$csat, reg_data$college)
plot(reg_data$csat, reg_data$expense)
plot(reg_data$csat, reg_data$percent)
#Apply transformation on percent variable. Relationship looks a bit curved from scatterplot.
plot(reg_data$csat, reg_data$percent)
#Perform transformation squared
reg_data$percent2 = reg_data$percent**2
#This looks more curved. Try to go the other way. log transformation
plot(reg_data$csat, reg_data$percent2)
reg_data$percent3 = log(reg_data$percent)
#This looks much better.
plot(reg_data$csat, reg_data$percent3)
#Perform regressions
#http://www.sthda.com/english/articles/40-regression-analysis/167-simple-linear-regression-in-r/
orig = lm(csat ~ expense + percent + income + high + college, data = reg_data)
#Summarize model results
summary(orig)
tran1 = lm(csat ~ expense + percent2 + income + high + college, data = reg_data)
summary(tran1)
tran2 = lm(csat ~ expense + percent3 + income + high + college, data = reg_data)
summary(tran2)
